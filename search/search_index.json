{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Berlin Marathon 2021 This project analyse results of the 2021 Berlin Marathon, that can be found on this website: https://berlin.r.mikatiming.net/2021/ Note: this website shows unofficial results, yet they are provided by the organizer of the event and are supposed to be correct, yet for example provides no information about the runners that did not finish the race; official results are provided in the format that is not feasible to scrape Following commands need to be run (if not done anytime before) to make all notebooks work pip install pandas pip install seaborn pip install altair pip install bs4 pip install time pip install sklearn pip install statsmodels Code The code is divided into three notebooks (for their content open the respective link on the left): Scraper Cleaner Analyser","title":"Home"},{"location":"#berlin-marathon-2021","text":"This project analyse results of the 2021 Berlin Marathon, that can be found on this website: https://berlin.r.mikatiming.net/2021/ Note: this website shows unofficial results, yet they are provided by the organizer of the event and are supposed to be correct, yet for example provides no information about the runners that did not finish the race; official results are provided in the format that is not feasible to scrape Following commands need to be run (if not done anytime before) to make all notebooks work pip install pandas pip install seaborn pip install altair pip install bs4 pip install time pip install sklearn pip install statsmodels","title":"Berlin Marathon 2021"},{"location":"#code","text":"The code is divided into three notebooks (for their content open the respective link on the left): Scraper Cleaner Analyser","title":"Code"},{"location":"Analyser/","text":"Analyser The following analysis and visualisations are done in this notebook: Number of finishers by several criteria: gender, age category, nationality etc. Finishing times by the same criteria as above. We get inspired by the paper from Smith (2018) read here and perform linear regression to find which factors influence how evenly the runners can keep the pace throughout the race. For each runner we prepare individualized graph of pacing throughout the whole race. Visualisations are done using following libraries: matplotlib , seaborn and altair .","title":"Analyser"},{"location":"Analyser/#analyser","text":"The following analysis and visualisations are done in this notebook: Number of finishers by several criteria: gender, age category, nationality etc. Finishing times by the same criteria as above. We get inspired by the paper from Smith (2018) read here and perform linear regression to find which factors influence how evenly the runners can keep the pace throughout the race. For each runner we prepare individualized graph of pacing throughout the whole race. Visualisations are done using following libraries: matplotlib , seaborn and altair .","title":"Analyser"},{"location":"Cleaner/","text":"Cleaner This notebook takes the .csv file produced in the Scraper and cleans it such that it can be used without any further changes for the actual analysis The code does the following transformations: Extracts country code from the name column, than using an auxiliary web-downloaded file provides the full name of the country based on the country code. The country codes used by organizer seems to be a combination of two formats, thus the unmatched codes are changed manually. From the category column the gender (first letter) and age range (last 2 digits or 1 letter, i this case we substitute it for the corresponding age). Times are transformed to the seconds/minutes, such that they can be treated as numeric in the analysis. The missing value is denoted by dash, for easier transformation, this is replaced by zeros in the appropriate format and be treated later on in the analysis. First dataframe produced is the marathon_clean.csv which serves as a general datasource for the further analysis. Additionally, pace_table.csv is created with a pace on each segment of a course for each runner. This dataframe is transformed to long format such that it is ready for visualisations.","title":"Cleaner"},{"location":"Cleaner/#cleaner","text":"This notebook takes the .csv file produced in the Scraper and cleans it such that it can be used without any further changes for the actual analysis The code does the following transformations: Extracts country code from the name column, than using an auxiliary web-downloaded file provides the full name of the country based on the country code. The country codes used by organizer seems to be a combination of two formats, thus the unmatched codes are changed manually. From the category column the gender (first letter) and age range (last 2 digits or 1 letter, i this case we substitute it for the corresponding age). Times are transformed to the seconds/minutes, such that they can be treated as numeric in the analysis. The missing value is denoted by dash, for easier transformation, this is replaced by zeros in the appropriate format and be treated later on in the analysis. First dataframe produced is the marathon_clean.csv which serves as a general datasource for the further analysis. Additionally, pace_table.csv is created with a pace on each segment of a course for each runner. This dataframe is transformed to long format such that it is ready for visualisations.","title":"Cleaner"},{"location":"Scraper/","text":"Scraper This notebook downloads all the required info about each runner. BeatifulSoup package together with Pandas tools is used. The code proceeds in the following way: Builds a set of links that each displays a table of 100 runners (maximum per page) From the list of links created above get all the links directing to the unique result page of each runner Loop through the links (over 23,000, expected download time of about 3 hours) to get scrape all the required fields Transform the table created above as the Pandas dataframe and save it as .csv file for the future use","title":"Scraper"},{"location":"Scraper/#scraper","text":"This notebook downloads all the required info about each runner. BeatifulSoup package together with Pandas tools is used. The code proceeds in the following way: Builds a set of links that each displays a table of 100 runners (maximum per page) From the list of links created above get all the links directing to the unique result page of each runner Loop through the links (over 23,000, expected download time of about 3 hours) to get scrape all the required fields Transform the table created above as the Pandas dataframe and save it as .csv file for the future use","title":"Scraper"}]}